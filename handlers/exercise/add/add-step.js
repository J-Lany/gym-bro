import backButton from '../../../keyboards/back-button.js';
import {
  AWAIT_DISCRIPTION,
  AWAIT_TAGS,
  AWAIT_TITLE,
  AWAIT_VIDEO,
} from '../../utils/consts.js';
import mainMenu from '../../../keyboards/main-menu.js';

export default async function handleAddSteps(ctx) {
  const { step, exercise } = ctx.session;

  if (ctx.message.text === 'üîô –ù–∞–∑–∞–¥') {
    ctx.session = {};
    return ctx.reply('üëâ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { reply_markup: mainMenu });
  }

  if (step === AWAIT_TITLE) {
    exercise.title = ctx.message.text;
    ctx.session.step = AWAIT_DISCRIPTION;
    return ctx.reply('‚úèÔ∏è  –í–≤–µ–¥–∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ:', { reply_markup: backButton });
  }

  if (step === AWAIT_DISCRIPTION) {
    exercise.description = ctx.message.text;
    ctx.session.step = AWAIT_VIDEO;
    return ctx.reply('üìπ –ü—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:', {
      reply_markup: backButton,
    });
  }

  if (step === AWAIT_TAGS) {
    exercise.tags = ctx.message.text
      .split(',')
      .map((t) => t.trim().toLowerCase())
      .filter(Boolean);

    exercise.authorId = ctx.from.id;
    const exModel = new (await import('../../../models/Exercise.js')).default(
      exercise
    );
    await exModel.save();

    ctx.session = {};
    return ctx.reply('‚úÖ –ö–∞–π—Ñ, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!', {
      reply_markup: mainMenu,
    });
  }
}
