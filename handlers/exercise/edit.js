import Exercise from '../../models/Exercise.js';
import isAdmin from '../admin/access-check.js';
import backButton from '../../keyboards/back-button.js';
import { InlineKeyboard } from 'grammy';
import mainMenu from '../../keyboards/main-menu.js';

export async function handleEditMenu(ctx) {
  await ctx.answerCallbackQuery();
  if (!isAdmin(ctx)) return ctx.reply('‚ùå –°–æ—Ä–∏, –Ω–æ —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.');

  const docs = await Exercise.find();
  if (!docs.length) return ctx.reply('–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–µ—Ç.');

  const kb = new InlineKeyboard();
  docs.forEach((e) => kb.text(e.title, `edit_ex:${e._id}`));
  kb.row().text('üîô –ù–∞–∑–∞–¥', 'menu:back');
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:', { reply_markup: kb });
}

export async function handleEditField(ctx) {
  await ctx.answerCallbackQuery();
  if (!isAdmin(ctx)) return ctx.reply('‚ùå –°–æ—Ä–∏, –Ω–æ —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.');

  const ex = await Exercise.findById(ctx.match[1]);

  if (!ex) return ctx.reply('–ù–µ –Ω–∞–π–¥–µ–Ω–æ.');

  ctx.session.editingExercise = ex;
  ctx.session.step = 'editing_field';

  const kb = new InlineKeyboard()
    .text('–ù–∞–∑–≤–∞–Ω–∏–µ', 'field:title')
    .text('–û–ø–∏—Å–∞–Ω–∏–µ', 'field:description')
    .row()
    .text('–í–∏–¥–µ–æ', 'field:video')
    .text('–¢–µ–≥–∏', 'field:tags')
    .row()
    .text('–û—Ç–º–µ–Ω–∞', 'menu:back');

  await ctx.reply('–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º?', { reply_markup: kb });
}

export async function handleEditValue(ctx) {
  const { step, editField, editingExercise } = ctx.session;
  if (step !== 'editing_value') return;
  if (!isAdmin(ctx)) return ctx.reply('‚ùå –ù–µ—Ç –ø—Ä–∞–≤.');

  if (editField === 'tags') {
    editingExercise.tags = ctx.message.text.split(',').map((t) => t.trim());
  } else {
    editingExercise[editField] = ctx.message.text;
  }

  await editingExercise.save();

  ctx.session = {};
  await ctx.reply('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!', { reply_markup: mainMenu });
}

export async function handleEditVideo(ctx) {
  const { step, editField, editingExercise } = ctx.session;

  if (step === 'editing_value' && editField === 'video') {
    if (!isAdmin(ctx)) return ctx.reply('‚ùå –ù–µ—Ç –ø—Ä–∞–≤.');

    editingExercise.videoFileId = ctx.message.video.file_id;
    await editingExercise.save();

    ctx.session = {};
    return ctx.reply('‚úÖ –í–∏–¥–µ–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!', { reply_markup: mainMenu });
  }
}
