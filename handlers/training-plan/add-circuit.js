import { InlineKeyboard } from 'grammy';
import Exercise from '../../models/Exercise.js';
import { safeReplyText } from '../utils/safe-replies.js';
import exOptKb from '../../keyboards/training-plan/exercise-options.js';

export async function handleStartCircuit(ctx) {
  ctx.session.circuit = {
    rounds: null,
    exercises: [],
  };
  ctx.session.fsm.state = 'await_circuit_rounds';

  const kb = new InlineKeyboard()
    .text('1', 'circuit:rounds:1')
    .text('2', 'circuit:rounds:2')
    .text('3', 'circuit:rounds:3')
    .text('4', 'circuit:rounds:4')
    .text('5', 'circuit:rounds:5');

  await ctx.reply('üîÅ –°–∫–æ–ª—å–∫–æ –∫—Ä—É–≥–æ–≤ –≤ –∫—Ä—É–≥–æ–≤–æ–π?', { reply_markup: kb });
}

export async function handleCircuitRounds(ctx) {
  const rounds = ctx.match[1];
  ctx.session.circuit.rounds = rounds;
  ctx.session.fsm.state = 'await_circuit_category';

  const tags = await Exercise.distinct('tags');
  const kb = new InlineKeyboard();
  tags.forEach((tag) => kb.text(tag, `circuit:category:${tag}`).row());

  await safeReplyText(ctx, 'üìÇ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:', kb);
}

export async function handleCircuitCategory(ctx) {
  const tag = ctx.match[1];
  ctx.session.currentCategory = tag;
  ctx.session.fsm.state = 'await_circuit_exercise';

  const exercises = await Exercise.find({ tags: tag }).limit(10);
  const kb = new InlineKeyboard();
  exercises.forEach((ex) => kb.text(ex.title, `circuit:ex:${ex._id}`).row());

  await safeReplyText(ctx, 'üèãüèΩ –í—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:', kb);
}

export async function handleCircuitExercise(ctx) {
  const exId = ctx.match[1];
  const exercise = await Exercise.findById(exId);
  ctx.session.tempExercise = { title: exercise.title };
  ctx.session.fsm.state = 'await_circuit_reps';

  await ctx.reply('üîÅ –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:');
}

export async function handleCircuitReps(ctx) {
  const reps = ctx.message.text.trim();
  const temp = ctx.session.tempExercise;
  ctx.session.circuit.exercises.push({ ...temp, reps });
  ctx.session.tempExercise = null;
  ctx.session.fsm.state = 'await_circuit_next';

  const kb = new InlineKeyboard()
    .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë', 'circuit:add')
    .text('üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫—Ä—É–≥–æ–≤—É—é', 'circuit:done');

  await ctx.reply('–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?', { reply_markup: kb });
}

export async function handleCircuitDone(ctx) {
  ctx.session.fsm.state = 'await_circuit_comment';
  await ctx.reply('üóí –î–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫—Ä—É–≥–æ–≤–æ–π (–∏–ª–∏ "-" –µ—Å–ª–∏ –±–µ–∑):');
}

export async function handleCircuitFinalComment(ctx) {
  if (!ctx.session.currentTraining) {
    ctx.session.currentTraining = { exercises: [] };
  }

  ctx.session.currentTraining.exercises.push({
    type: 'circuit',
    rounds: ctx.session.circuit.rounds,
    items: ctx.session.circuit.exercises,
    comment: ctx.message.text.trim(),
  });

  ctx.session.circuit = null;
  ctx.session.fsm.state = 'add_exercise';

  await ctx.reply('‚úÖ –ö—Ä—É–≥–æ–≤–∞—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!', { reply_markup: exOptKb });
}
